Глава 1
	История про корабль Vasa: ограничение по времени, ограничение по бюджету, экстраполяция предыдущего опыта на новые обстоятельства, одновременное сочетание боевого и транспортного корабля привели к провалу.
	Попытка угодить всем разнородным требованиям - ключ к неудаче.(Bill Cosby)
	Одновременно невозможно сделать систему производительной, масштабируемой, расширяемой, легкой в поддержке и за разумные деньги(feasibility).
	Architecture tradeoff analisys method(ATAM)
		- Приоретизация требований
		- Защита архитектуры, проход по сценариям, обоснование по исключенным требованиям
		- Подтвержденный контракт на архитектуру
	Agile ATAM
		- Презентации
		- Анализ компромиссов, валидация архитектуры
		- Определение и уменьшение рисков
		- Вовлечение всех участников проекта
		- Итеративность: сценарии могут измениться и соответственно архитектура может стать невалидной
		- Для эффективности возможно потребуются встречи небольшими группами(не все заинтересованные лица одновременно присутствуют на встрече)
		
Глава 2
	Одна из целей Continious Delivery - ПО всё время готово к релизу
	Работоспособность ПО зависит не только от кода, но и от конфигурации, версии ОС и т.п. => нужно это тоже проверять, причем в автоматическом режиме
	CD нужно вводить уже на ранних стадиях
	Автоматизация! Полное разворачивание системы и прогон сценариев. Вручную должны обнаруживаться только нетривиальные вещи
	Используйте ограничение по времени для решения задач по автоматизации. Если не прошло - возможно задача технически слишком трудна и легче это делать вручную
	Ищите пути для автоматизации, даже если первые попытки не увенчались успехом
	Не стригите яков!(Don't shave yaks!) - если одно изменение приводит к большой цепочки других изменений и проблем, возможно от начального изменения стоит отказаться
	Machines are compiled output
	Yesterdays's best practices become tomorrows anti-patterns
	Связаннасть очень большая проблема
	Архитектура всегда становится итеративной, это только вопрос времени
	Нужно уметь приключаться micro <=> macro
	Для пользователей удобнее постпенные небольшие изменения
	Поставка фичи может осуществляться начиная с небольшого кол-ва пользователей и постепенно расширяться(canary releasing)
	
Глава 3
	Аспекты абстракции
		- Абстрагирование от местонахождения(location transparancy)
		- Абстрагирование от имени
		- Абстрагирование от реализации
		- Абстрагирование от протокола доступа
		- Абстрагирование от контракта
		
	Методы абстракции
		- Брокер сообщений
		- Адаптер
		- ESB
	
	Паттерны
		- Слои
		- Событийно-ориентированная архитектура
		- SOA

Глава 4(Сравнение и выбор архитектуры)
	Отслеживать тренды в архитектуре
	Нормализация матрицы фич(feature matrix)
	Избегать полярных оценок "супер/отстой"
		http://nealford.com/memeagora/2009/08/05/suck-rock-dichotomy.html
	Примеры архитектур:
		CQRS
			- almost always requires eventual consistency
		Eventually Consistent
			http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
		Классификация доменной логики
			http://martinfowler.com/bliki/EagerReadDerivation.html
		Архитектура LMAX(1 класс, 1 поток, 6КК orders/sec)!!!!
			http://martinfowler.com/articles/lmax.html
			
	
	
	
	
	
	
	