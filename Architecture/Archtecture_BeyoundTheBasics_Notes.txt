Глава 1
	История про корабль Vasa: ограничение по времени, ограничение по бюджету, экстраполяция предыдущего опыта на новые обстоятельства, одновременное сочетание боевого и транспортного корабля привели к провалу.
	Попытка угодить всем разнородным требованиям - ключ к неудаче.(Bill Cosby)
	Одновременно невозможно сделать систему производительной, масштабируемой, расширяемой, легкой в поддержке и за разумные деньги(feasibility).
	Architecture tradeoff analisys method(ATAM)
		- Приоретизация требований
		- Защита архитектуры, проход по сценариям, обоснование по исключенным требованиям
		- Подтвержденный контракт на архитектуру
	Agile ATAM
		- Презентации
		- Анализ компромиссов, валидация архитектуры
		- Определение и уменьшение рисков
		- Вовлечение всех участников проекта
		- Итеративность: сценарии могут измениться и соответственно архитектура может стать невалидной
		- Для эффективности возможно потребуются встречи небольшими группами(не все заинтересованные лица одновременно присутствуют на встрече)
		
Глава 2
	Одна из целей Continious Delivery - ПО всё время готово к релизу
	Работоспособность ПО зависит не только от кода, но и от конфигурации, версии ОС и т.п. => нужно это тоже проверять, причем в автоматическом режиме
	CD нужно вводить уже на ранних стадиях
	Автоматизация! Полное разворачивание системы и прогон сценариев. Вручную должны обнаруживаться только нетривиальные вещи
	Используйте ограничение по времени для решения задач по автоматизации. Если не прошло - возможно задача технически слишком трудна и легче это делать вручную
	Ищите пути для автоматизации, даже если первые попытки не увенчались успехом
	Не стригите яков!(Don't shave yaks!) - если одно изменение приводит к большой цепочки других изменений и проблем, возможно от начального изменения стоит отказаться
	Machines are compiled output
	Yesterdays's best practices become tomorrows anti-patterns
	Связаннасть очень большая проблема
	Архитектура всегда становится итеративной, это только вопрос времени
	Нужно уметь приключаться micro <=> macro
	Для пользователей удобнее постпенные небольшие изменения
	Поставка фичи может осуществляться начиная с небольшого кол-ва пользователей и постепенно расширяться(canary releasing)
	
Глава 3
	Аспекты абстракции
		- Абстрагирование от местонахождения(location transparancy)
		- Абстрагирование от имени
		- Абстрагирование от реализации
		- Абстрагирование от протокола доступа
		- Абстрагирование от контракта
		
	Методы абстракции
		- Брокер сообщений
		- Адаптер
		- ESB
	
	Паттерны
		- Слои
		- Событийно-ориентированная архитектура
		- SOA

Глава 4(Сравнение и выбор архитектуры)
	Отслеживать тренды в архитектуре
	Нормализация матрицы фич(feature matrix)
	Избегать полярных оценок "супер/отстой"
		http://nealford.com/memeagora/2009/08/05/suck-rock-dichotomy.html
	Примеры архитектур:
		CQRS
			- almost always requires eventual consistency
		Eventually Consistent
			http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
		Классификация доменной логики
			http://martinfowler.com/bliki/EagerReadDerivation.html
		Архитектура LMAX(1 класс, 1 поток, 6КК orders/sec)!!!!
			http://martinfowler.com/articles/lmax.html
			
Глава 5 (Веб-сервисы и Брокеры сообщения)
	REST
		- Рекомендованная книга http://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829
		- Hypermedia as the Engine of Application State
		- Глагол и url могут определять следующее состояние для объекта, реализую стейт-машину
		- Используйте встроенный механизм кэширования
	Брокеры сообщения vs Веб-сервисы
		- Асинхронные запросы
		- Гарантированная доставка
		- Мониторинг
		- Процессинг ошибок
		- Производительность
		- НО! Не работает с брэндмауэром
	Есть возможность использовать REST для очередей
	
Глава 6(Фундаментальные принципы SOA)
	2 критерия SOA
		- Сервисы бизнес-уровня(разместить заказ, оплатить заказ)
		- Отделение бизнес-сервисов от корпоративных сервисов(внутренних сервисов компании)
	Пример сервиса, который не является бизнес-сервисом: для страховой компании сервис регистрации клиентов
	Типы сервисов для SOA: бизнес, корпоративный, приложения, инфраструктурный
	Бизнес-сервис должен быть абстрагирован от: имени, расположения, реализации, протокола, контракта
		Для этого требуется: реестр сервисов, преобразователь структуры сообщений, преобразователь формата сообщений, преобразователь протокола
	http://soa.sys-con.com/node/738704
	https://en.wikipedia.org/wiki/Service-oriented_architecture
	
Глава 7(Интеграционные шины)
	Чем сложнее топология компонент, тем потребность в интеграционной шине выше
	Примеры интеграционных шин: Camel, Mule, WebShere ESB, Oracle ESB
	Позволяет компонентам независимо изменяться
	Компромисс: уменьшения связности компонент приводит к усложнению развертывания
	Для отказоустойчивости нужно использовать федерализацию(???)
	Кастомный код в шине - скользкая дорожка(Slippery Slope)
	
Глава 8(ContDelivery 2)
	Текущая тенденция: уход от разделяемых ресурсов к обособленным компонентам
	Strangler Pattern
	ESB - умный роутер, но не более, иначе возникает сильная связанность
	Предпочитайте хореографию, а не дирижирование
	Решение проблемы сервиса с многими клиентами - Сonsumer Driven Contracts
		http://martinfowler.com/articles/consumerDrivenContracts.html
	Следите за зависимостями(визуализация зависимостей проектов)
	structure101 - Инструмент анализа
	JDepend позволяет писать юнит-тесты для проверки зависимостей java-пакетов
	Избегайте зависимостей в виде алмаза(diamond)
	martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf
	Есть статические и динамические элементы архитектуры
	Нет времени на рефакторинг - отдельная изменяющаяся команда архитекторов на рефакторинг!
	
Глава 9(Подходы к архитектуре корпоративных приложений)
	Централизованный подход
		Классический нормативный подход
		Классический альтернативный подход
	Децентрализованный подход
		Распределенный подход
			Уровни стандартов
		Подход устойчивого интерфейса
			Стандарты для коммуникации подразделений
				Такие стандарты тяжело изменять
	
	http://www.amazon.com/A-Practical-Guide-Enterprise-Architecture/dp/0131412752
	http://www.amazon.com/Real-Business-IT-Create-Communicate/dp/1422147614
	
Глава 10
	Декартовы координаты:  локальный-корпоративный ,тактический-стратегический
		4 зоны: ничего не решающая битва, решающая битва, осада, вторжение
		
Глава 11
	Стихийный дизайн
		Нахождение абстракций и паттернов в текущем коде
		Принимать решения, когда уже накоплен опыт и лучше понятен контекст(т.е. откладывать до определенной точки)
	Технический долг
		http://martinfowler.com/bliki/TechnicalDebtQuadrant.html
		Для того, чтобы убедить в важности заниматься техническим долгом демонстрируйте графики возростания/снижения сложности системы(Cyclomatic comp per line of code)
	Улучшители для стихийного дизайна
		TDD
	Метрика Afferent coupling - отслеживание паттернов в коде команды
	Если с течением времени компонент постоянно усложняестся - подумайте о его замене